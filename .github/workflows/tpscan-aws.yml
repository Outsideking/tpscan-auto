name: TPscan + GPT + Cloud Android + AWS ECS

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 2 * * *'  # ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 09:00 ‡πÑ‡∏ó‡∏¢

jobs:
  scan-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1Ô∏è‚É£ Clone repo
      - name: Clone repo
        run: |
          git clone https://github.com/${GITHUB_REPOSITORY}.git repo
          echo "WORKDIR=$PWD/repo" >> $GITHUB_ENV

      # 2Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y golang-go python3-pip docker.io docker-compose jq
          pip3 install --upgrade openai requests boto3

      # 3Ô∏è‚É£ Build TPscan
      - name: Build TPscan
        run: |
          cd "$WORKDIR/tools" || mkdir -p "$WORKDIR/tools"
          cd "$WORKDIR/tools"
          git clone https://github.com/captain686/TpScan.git
          cd TpScan
          go build -o tpscan

      # 4Ô∏è‚É£ Run scan
      - name: Run TPscan
        run: |
          cd "$WORKDIR"
          mkdir -p reports
          ./tools/TpScan/tpscan -f targets.txt | tee reports/raw.txt

      # 5Ô∏è‚É£ GPT Summary + Discord
      - name: GPT Summary + Discord
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          cd "$WORKDIR"
          python3 - << 'PY'
import os, io, requests
from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
raw = io.open("reports/raw.txt","r",encoding="utf-8",errors="ignore").read()
prompt = (
  "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô ThinkPHP ‡πÅ‡∏ö‡∏ö bullet list:\n"
  "1) ‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‚Üí‡∏ï‡πà‡∏≥\n"
  "2) ‡πÑ‡∏•‡πà URL/‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà\n"
  "3) ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏™‡∏±‡πâ‡∏ô‡πÜ\n\n"
  f"Raw logs (‡∏ï‡∏±‡∏î‡∏¢‡πà‡∏≠):\n{raw[:120000]}"
)
resp = client.chat.completions.create(
    model="gpt-5",
    messages=[
      {"role":"system","content":"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏ß‡πá‡∏ö"},
      {"role":"user","content":prompt}
    ],
    temperature=0
)
md = resp.choices[0].message.content
io.open("reports/summary.md","w",encoding="utf-8").write(md)

discord_webhook = os.environ.get("DISCORD_WEBHOOK")
if discord_webhook:
    content = f"**TPscan Daily Summary**\n```\n{md[:1900]}\n```"
    requests.post(discord_webhook, json={"content": content})
PY

      # 6Ô∏è‚É£ Commit reports
      - name: Commit reports
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: actions@github.com
          GIT_COMMITTER_NAME: github-actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |
          cd "$WORKDIR"
          git checkout -B scan-reports
          git add reports/*
          git commit -m "tpscan report $(date -u +'%Y-%m-%dT%H:%MZ')" || echo "No changes"
          git push -f "https://x-access-token:${{ github.token }}@github.com/${GITHUB_REPOSITORY}.git" scan-reports

      # 7Ô∏è‚É£ Build Docker image (Cloud Android)
      - name: Build Docker image
        run: |
          cd "$WORKDIR/cloud-android-web"
          docker build -t cloud-android-web:latest .

      # 8Ô∏è‚É£ Login ECR
      - name: Login AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: ecr

      # 9Ô∏è‚É£ Tag & push Docker image to ECR
      - name: Push Docker image to AWS ECR
        env:
          AWS_REGION: ap-southeast-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cloud-android-web:latest
          docker tag cloud-android-web:latest $IMAGE_URI
          docker push $IMAGE_URI

      # üîü Deploy to ECS (Fargate)
      - name: Deploy to ECS
        env:
          AWS_REGION: ap-southeast-1
          AWS_CLUSTER: cloud-android-cluster
          AWS_SERVICE: cloud-android-service
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cloud-android-web:latest
          aws ecs update-service \
            --cluster $AWS_CLUSTER \
            --service $AWS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION
