name: Cloud Android Web Deploy

on:
  workflow_dispatch: {}

jobs:
  deploy-cloud-android:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose jq
          pip3 install --upgrade boto3

      # Build Docker images
      - name: Build Docker images
        run: |
          docker build -t cloud-android-web ./cloud-android-web
          docker build -t frontend ./frontend

      # AWS ECR login
      - name: AWS ECR login
        uses: aws-actions/amazon-ecr-login@v1

      # Push Docker images to ECR
      - name: Push Docker images
        run: |
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION=${{ secrets.AWS_REGION }}

          docker tag cloud-android-web $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cloud-android-web:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cloud-android-web:latest

          docker tag frontend $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/frontend:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/frontend:latest

      # Detect VPC/Subnet/SG
      - name: Detect AWS Network
        id: network
        run: |
          AWS_REGION=${{ secrets.AWS_REGION }}
          VPC=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query "Vpcs[0].VpcId" --output text --region $AWS_REGION)
          SUBNETS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC Name=map-public-ip-on-launch,Values=true --query "Subnets[].SubnetId" --output text --region $AWS_REGION)
          SUBNET_LIST=$(echo $SUBNETS | awk '{print $1","$2}')
          SG=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values=$VPC Name=group-name,Values="default" --query "SecurityGroups[0].GroupId" --output text --region $AWS_REGION)
          echo "subnets=$SUBNET_LIST" >> $GITHUB_OUTPUT
          echo "sg=$SG" >> $GITHUB_OUTPUT

      # Register Task Definition and Deploy ECS Service
      - name: Deploy ECS Services
        run: |
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          CLUSTER=cloud-android-cluster
          SUBNET_LIST=${{ steps.network.outputs.subnets }}
          SG=${{ steps.network.outputs.sg }}

          declare -A SERVICES
          SERVICES=( [cloud-android-web]=cloud-android-web:latest [frontend-service]=frontend:latest )

          for SERVICE in "${!SERVICES[@]}"; do
            IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${SERVICES[$SERVICE]}
            TASK_DEF=$(cat <<EOF
{
  "family": "$SERVICE-task",
  "networkMode": "awsvpc",
  "requiresCompatibilities": ["FARGATE"],
  "cpu": "512",
  "memory": "1024",
  "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskExecutionRole",
  "containerDefinitions": [
    {
      "name": "$SERVICE",
      "image": "$IMAGE",
      "essential": true,
      "portMappings": [{"containerPort": 80, "protocol": "tcp"}]
    }
  ]
}
EOF
)
            echo "$TASK_DEF" > taskdef.json
            TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json --region $AWS_REGION --query "taskDefinition.taskDefinitionArn" --output text)

            # Update or create service
            if aws ecs describe-services --cluster $CLUSTER --services $SERVICE --region $AWS_REGION | grep -q '"status": "ACTIVE"'; then
              aws ecs update-service --cluster $CLUSTER --service $SERVICE --task-definition $TASK_DEF_ARN --force-new-deployment --region $AWS_REGION
            else
              aws ecs create-service --cluster $CLUSTER --service-name $SERVICE --task-definition $TASK_DEF_ARN --launch-type FARGATE --desired-count 1 --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_LIST],securityGroups=[$SG],assignPublicIp=ENABLED}" --region $AWS_REGION
            fi
          done
